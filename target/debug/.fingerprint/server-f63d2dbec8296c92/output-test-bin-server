{"$message_type":"diagnostic","message":"unused import: `tokio::io::AsyncReadExt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"server/src/main.rs","byte_start":132,"byte_end":155,"line_start":6,"line_end":6,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use tokio::io::AsyncReadExt;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"server/src/main.rs","byte_start":128,"byte_end":157,"line_start":6,"line_end":7,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::io::AsyncReadExt;","highlight_start":1,"highlight_end":29},{"text":"use tokio::sync::Mutex;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `tokio::io::AsyncReadExt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mserver/src/main.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::io::AsyncReadExt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::net::TcpListener as BlockingListener`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"server/src/main.rs","byte_start":536,"byte_end":577,"line_start":18,"line_end":18,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"use std::net::TcpListener as BlockingListener;","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"server/src/main.rs","byte_start":532,"byte_end":579,"line_start":18,"line_end":19,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::net::TcpListener as BlockingListener;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::net::TcpListener as BlockingListener`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mserver/src/main.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::net::TcpListener as BlockingListener;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"server/src/main.rs","byte_start":5229,"byte_end":5235,"line_start":169,"line_end":169,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Ok(())","highlight_start":5,"highlight_end":11}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"server/src/main.rs","byte_start":1319,"byte_end":5223,"line_start":48,"line_end":167,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    loop {","highlight_start":5,"highlight_end":11},{"text":"        let (mut tcp, addr) = listener","highlight_start":1,"highlight_end":39},{"text":"            .accept()","highlight_start":1,"highlight_end":22},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .expect(\"Could not accept the incoming connection\");","highlight_start":1,"highlight_end":65},{"text":"        println!(\"New connection accepted from address {}\", addr);","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let ipaddr = addr.to_string();","highlight_start":1,"highlight_end":39},{"text":"        let (reader, writer) = tcp.split();","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut stream = FramedRead::new(reader, LinesCodec::new());","highlight_start":1,"highlight_end":69},{"text":"        let mut sink = FramedWrite::new(writer, LinesCodec::new());","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let valid_user = false;","highlight_start":1,"highlight_end":32},{"text":"        let valid_pass = false;","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let username = match stream.next().await {","highlight_start":1,"highlight_end":51},{"text":"            Some(Ok(line)) => {","highlight_start":1,"highlight_end":32},{"text":"                println!(\"Username {} has attempted to log on to the server\", line);","highlight_start":1,"highlight_end":85},{"text":"                line","highlight_start":1,"highlight_end":21},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                println!(\"connection closed before the username could be received\");","highlight_start":1,"highlight_end":85},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let known_user: bool =","highlight_start":1,"highlight_end":31},{"text":"            sqlx::query_scalar::<_, i64>(\"SELECT COUNT(*) FROM Users WHERE username = ?\")","highlight_start":1,"highlight_end":90},{"text":"                .bind(&username)","highlight_start":1,"highlight_end":33},{"text":"                .fetch_one(&*DB)","highlight_start":1,"highlight_end":33},{"text":"                .await","highlight_start":1,"highlight_end":23},{"text":"                .expect(\"Could not unwrap the query for all usernames\")","highlight_start":1,"highlight_end":72},{"text":"                != 0;","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match known_user {","highlight_start":1,"highlight_end":27},{"text":"            true => {","highlight_start":1,"highlight_end":22},{"text":"                let _ = sink.send(\"100\").await;","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            false => {","highlight_start":1,"highlight_end":23},{"text":"                let _ = sink.send(\"101\").await;","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut password = match stream.next().await {","highlight_start":1,"highlight_end":55},{"text":"            Some(Ok(line)) => {","highlight_start":1,"highlight_end":32},{"text":"                println!(\"Successfully received the password from the user\");","highlight_start":1,"highlight_end":78},{"text":"                line","highlight_start":1,"highlight_end":21},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                println!(\"Error connection closed before client sent password.\");","highlight_start":1,"highlight_end":82},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut passed = if known_user {","highlight_start":1,"highlight_end":41},{"text":"            println!(\"HERE\");","highlight_start":1,"highlight_end":30},{"text":"            sqlx::query_scalar::<_, i64>(","highlight_start":1,"highlight_end":42},{"text":"                \"SELECT COUNT(*) FROM Users ","highlight_start":1,"highlight_end":45},{"text":"                              WHERE username =? AND password = ?\",","highlight_start":1,"highlight_end":67},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .bind(&username)","highlight_start":1,"highlight_end":29},{"text":"            .bind(&password)","highlight_start":1,"highlight_end":29},{"text":"            .fetch_one(&*DB)","highlight_start":1,"highlight_end":29},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .expect(\"Could not unwrap the DB query\")","highlight_start":1,"highlight_end":53},{"text":"                != 0","highlight_start":1,"highlight_end":21},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            println!(\"HERE\");","highlight_start":1,"highlight_end":30},{"text":"            let _ = sqlx::query!(","highlight_start":1,"highlight_end":34},{"text":"                \"INSERT INTO Users (username,password,ipaddr) VALUES (?1,?2,?3)\",","highlight_start":1,"highlight_end":82},{"text":"                username,","highlight_start":1,"highlight_end":26},{"text":"                password,","highlight_start":1,"highlight_end":26},{"text":"                ipaddr","highlight_start":1,"highlight_end":23},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .execute(&*DB)","highlight_start":1,"highlight_end":27},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .expect(\"Could not insert the new tuple into the table\");","highlight_start":1,"highlight_end":70},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        while !passed {","highlight_start":1,"highlight_end":24},{"text":"            println!(\"{}\", passed);","highlight_start":1,"highlight_end":36},{"text":"            let _ = sink.send(\"102\").await;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            //Now we would have to wait for the client to resend a valid password and we will have","highlight_start":1,"highlight_end":99},{"text":"            //to check if it is the valid password for the user.","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            password = match stream.next().await {","highlight_start":1,"highlight_end":51},{"text":"                Some(Ok(line)) => {","highlight_start":1,"highlight_end":36},{"text":"                    println!(\"Successfully received the password from the user now comparing ...\");","highlight_start":1,"highlight_end":100},{"text":"                    line","highlight_start":1,"highlight_end":25},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                Some(Err(err)) => {","highlight_start":1,"highlight_end":36},{"text":"                    println!(\"Error in the sending {}\", err);","highlight_start":1,"highlight_end":62},{"text":"                    continue;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                None => {","highlight_start":1,"highlight_end":26},{"text":"                    println!(\"Connection with the client has been interrupted\");","highlight_start":1,"highlight_end":81},{"text":"                    continue;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            passed = sqlx::query_scalar::<_, i64>(","highlight_start":1,"highlight_end":51},{"text":"                \"SELECT COUNT(*) FROM Users ","highlight_start":1,"highlight_end":45},{"text":"                              WHERE username =? AND password = ?\",","highlight_start":1,"highlight_end":67},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"            .bind(&username)","highlight_start":1,"highlight_end":29},{"text":"            .bind(&password)","highlight_start":1,"highlight_end":29},{"text":"            .fetch_one(&*DB)","highlight_start":1,"highlight_end":29},{"text":"            .await","highlight_start":1,"highlight_end":19},{"text":"            .expect(\"Could not unwrap the DB query\")","highlight_start":1,"highlight_end":53},{"text":"                != 0;","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let _ = sink.send(\"100\").await;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let history_clone = Arc::clone(&history);","highlight_start":1,"highlight_end":50},{"text":"        let _ = tokio::spawn(handle_user(tcp, tx.clone(), history_clone));","highlight_start":1,"highlight_end":75},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mserver/src/main.rs:169:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut tcp, addr) = listener\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .accept()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .await\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let _ = tokio::spawn(handle_user(tcp, tx.clone(), history_clone));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `err`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"server/src/main.rs","byte_start":1058,"byte_end":1061,"line_start":39,"line_end":39,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        Err(err) => {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"server/src/main.rs","byte_start":1058,"byte_end":1061,"line_start":39,"line_end":39,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        Err(err) => {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_err","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `err`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mserver/src/main.rs:39:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(err) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_err`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `valid_user`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"server/src/main.rs","byte_start":1773,"byte_end":1783,"line_start":61,"line_end":61,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let valid_user = false;","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"server/src/main.rs","byte_start":1773,"byte_end":1783,"line_start":61,"line_end":61,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let valid_user = false;","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"_valid_user","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `valid_user`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mserver/src/main.rs:61:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let valid_user = false;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_valid_user`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `valid_pass`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"server/src/main.rs","byte_start":1805,"byte_end":1815,"line_start":62,"line_end":62,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let valid_pass = false;","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"server/src/main.rs","byte_start":1805,"byte_end":1815,"line_start":62,"line_end":62,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let valid_pass = false;","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"_valid_pass","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `valid_pass`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mserver/src/main.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let valid_pass = false;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_valid_pass`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `User` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"server/src/main.rs","byte_start":605,"byte_end":609,"line_start":21,"line_end":21,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"struct User {","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `User` is never constructed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mserver/src/main.rs:21:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct User {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}
